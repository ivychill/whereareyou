// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/trackevent.proto

#ifndef PROTOBUF_proto_2ftrackevent_2eproto__INCLUDED
#define PROTOBUF_proto_2ftrackevent_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace luyun {
namespace whereareyou {
namespace shared {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_proto_2ftrackevent_2eproto();
void protobuf_AssignDesc_proto_2ftrackevent_2eproto();
void protobuf_ShutdownFile_proto_2ftrackevent_2eproto();

class TrackEvent;

enum TrackEvent_EventType {
  TrackEvent_EventType_START_TRACKING_REQ = 120,
  TrackEvent_EventType_START_TRACKING_REP = 210,
  TrackEvent_EventType_SEND_LOC_REQ = 320,
  TrackEvent_EventType_SEND_LOC_REP = 230,
  TrackEvent_EventType_QUERY_BY_ID_REQ = 321,
  TrackEvent_EventType_QUERY_BY_ID_REP = 231,
  TrackEvent_EventType_FWD_LOC_REQ = 211,
  TrackEvent_EventType_FWD_LOC_REP = 121
};
bool TrackEvent_EventType_IsValid(int value);
const TrackEvent_EventType TrackEvent_EventType_EventType_MIN = TrackEvent_EventType_START_TRACKING_REQ;
const TrackEvent_EventType TrackEvent_EventType_EventType_MAX = TrackEvent_EventType_QUERY_BY_ID_REQ;
const int TrackEvent_EventType_EventType_ARRAYSIZE = TrackEvent_EventType_EventType_MAX + 1;

const ::google::protobuf::EnumDescriptor* TrackEvent_EventType_descriptor();
inline const ::std::string& TrackEvent_EventType_Name(TrackEvent_EventType value) {
  return ::google::protobuf::internal::NameOfEnum(
    TrackEvent_EventType_descriptor(), value);
}
inline bool TrackEvent_EventType_Parse(
    const ::std::string& name, TrackEvent_EventType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TrackEvent_EventType>(
    TrackEvent_EventType_descriptor(), name, value);
}
// ===================================================================

class TrackEvent : public ::google::protobuf::Message {
 public:
  TrackEvent();
  virtual ~TrackEvent();
  
  TrackEvent(const TrackEvent& from);
  
  inline TrackEvent& operator=(const TrackEvent& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TrackEvent& default_instance();
  
  void Swap(TrackEvent* other);
  
  // implements Message ----------------------------------------------
  
  TrackEvent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrackEvent& from);
  void MergeFrom(const TrackEvent& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef TrackEvent_EventType EventType;
  static const EventType START_TRACKING_REQ = TrackEvent_EventType_START_TRACKING_REQ;
  static const EventType START_TRACKING_REP = TrackEvent_EventType_START_TRACKING_REP;
  static const EventType SEND_LOC_REQ = TrackEvent_EventType_SEND_LOC_REQ;
  static const EventType SEND_LOC_REP = TrackEvent_EventType_SEND_LOC_REP;
  static const EventType QUERY_BY_ID_REQ = TrackEvent_EventType_QUERY_BY_ID_REQ;
  static const EventType QUERY_BY_ID_REP = TrackEvent_EventType_QUERY_BY_ID_REP;
  static const EventType FWD_LOC_REQ = TrackEvent_EventType_FWD_LOC_REQ;
  static const EventType FWD_LOC_REP = TrackEvent_EventType_FWD_LOC_REP;
  static inline bool EventType_IsValid(int value) {
    return TrackEvent_EventType_IsValid(value);
  }
  static const EventType EventType_MIN =
    TrackEvent_EventType_EventType_MIN;
  static const EventType EventType_MAX =
    TrackEvent_EventType_EventType_MAX;
  static const int EventType_ARRAYSIZE =
    TrackEvent_EventType_EventType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EventType_descriptor() {
    return TrackEvent_EventType_descriptor();
  }
  static inline const ::std::string& EventType_Name(EventType value) {
    return TrackEvent_EventType_Name(value);
  }
  static inline bool EventType_Parse(const ::std::string& name,
      EventType* value) {
    return TrackEvent_EventType_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .com.luyun.whereareyou.shared.TrackEvent.EventType type = 1 [default = START_TRACKING_REQ];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::com::luyun::whereareyou::shared::TrackEvent_EventType type() const;
  inline void set_type(::com::luyun::whereareyou::shared::TrackEvent_EventType value);
  
  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional string tracker = 3;
  inline bool has_tracker() const;
  inline void clear_tracker();
  static const int kTrackerFieldNumber = 3;
  inline const ::std::string& tracker() const;
  inline void set_tracker(const ::std::string& value);
  inline void set_tracker(const char* value);
  inline void set_tracker(const char* value, size_t size);
  inline ::std::string* mutable_tracker();
  inline ::std::string* release_tracker();
  
  // optional string tracker_x = 4;
  inline bool has_tracker_x() const;
  inline void clear_tracker_x();
  static const int kTrackerXFieldNumber = 4;
  inline const ::std::string& tracker_x() const;
  inline void set_tracker_x(const ::std::string& value);
  inline void set_tracker_x(const char* value);
  inline void set_tracker_x(const char* value, size_t size);
  inline ::std::string* mutable_tracker_x();
  inline ::std::string* release_tracker_x();
  
  // optional string tracker_y = 5;
  inline bool has_tracker_y() const;
  inline void clear_tracker_y();
  static const int kTrackerYFieldNumber = 5;
  inline const ::std::string& tracker_y() const;
  inline void set_tracker_y(const ::std::string& value);
  inline void set_tracker_y(const char* value);
  inline void set_tracker_y(const char* value, size_t size);
  inline ::std::string* mutable_tracker_y();
  inline ::std::string* release_tracker_y();
  
  // optional string trackee = 6;
  inline bool has_trackee() const;
  inline void clear_trackee();
  static const int kTrackeeFieldNumber = 6;
  inline const ::std::string& trackee() const;
  inline void set_trackee(const ::std::string& value);
  inline void set_trackee(const char* value);
  inline void set_trackee(const char* value, size_t size);
  inline ::std::string* mutable_trackee();
  inline ::std::string* release_trackee();
  
  // optional string trackee_x = 7;
  inline bool has_trackee_x() const;
  inline void clear_trackee_x();
  static const int kTrackeeXFieldNumber = 7;
  inline const ::std::string& trackee_x() const;
  inline void set_trackee_x(const ::std::string& value);
  inline void set_trackee_x(const char* value);
  inline void set_trackee_x(const char* value, size_t size);
  inline ::std::string* mutable_trackee_x();
  inline ::std::string* release_trackee_x();
  
  // optional string trackee_y = 8;
  inline bool has_trackee_y() const;
  inline void clear_trackee_y();
  static const int kTrackeeYFieldNumber = 8;
  inline const ::std::string& trackee_y() const;
  inline void set_trackee_y(const ::std::string& value);
  inline void set_trackee_y(const char* value);
  inline void set_trackee_y(const char* value, size_t size);
  inline ::std::string* mutable_trackee_y();
  inline ::std::string* release_trackee_y();
  
  // @@protoc_insertion_point(class_scope:com.luyun.whereareyou.shared.TrackEvent)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_tracker();
  inline void clear_has_tracker();
  inline void set_has_tracker_x();
  inline void clear_has_tracker_x();
  inline void set_has_tracker_y();
  inline void clear_has_tracker_y();
  inline void set_has_trackee();
  inline void clear_has_trackee();
  inline void set_has_trackee_x();
  inline void clear_has_trackee_x();
  inline void set_has_trackee_y();
  inline void clear_has_trackee_y();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int type_;
  ::google::protobuf::int32 id_;
  ::std::string* tracker_;
  ::std::string* tracker_x_;
  ::std::string* tracker_y_;
  ::std::string* trackee_;
  ::std::string* trackee_x_;
  ::std::string* trackee_y_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_proto_2ftrackevent_2eproto();
  friend void protobuf_AssignDesc_proto_2ftrackevent_2eproto();
  friend void protobuf_ShutdownFile_proto_2ftrackevent_2eproto();
  
  void InitAsDefaultInstance();
  static TrackEvent* default_instance_;
};
// ===================================================================


// ===================================================================

// TrackEvent

// required .com.luyun.whereareyou.shared.TrackEvent.EventType type = 1 [default = START_TRACKING_REQ];
inline bool TrackEvent::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrackEvent::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrackEvent::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrackEvent::clear_type() {
  type_ = 120;
  clear_has_type();
}
inline ::com::luyun::whereareyou::shared::TrackEvent_EventType TrackEvent::type() const {
  return static_cast< ::com::luyun::whereareyou::shared::TrackEvent_EventType >(type_);
}
inline void TrackEvent::set_type(::com::luyun::whereareyou::shared::TrackEvent_EventType value) {
  GOOGLE_DCHECK(::com::luyun::whereareyou::shared::TrackEvent_EventType_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 id = 2;
inline bool TrackEvent::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrackEvent::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrackEvent::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TrackEvent::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 TrackEvent::id() const {
  return id_;
}
inline void TrackEvent::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional string tracker = 3;
inline bool TrackEvent::has_tracker() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TrackEvent::set_has_tracker() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TrackEvent::clear_has_tracker() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TrackEvent::clear_tracker() {
  if (tracker_ != &::google::protobuf::internal::kEmptyString) {
    tracker_->clear();
  }
  clear_has_tracker();
}
inline const ::std::string& TrackEvent::tracker() const {
  return *tracker_;
}
inline void TrackEvent::set_tracker(const ::std::string& value) {
  set_has_tracker();
  if (tracker_ == &::google::protobuf::internal::kEmptyString) {
    tracker_ = new ::std::string;
  }
  tracker_->assign(value);
}
inline void TrackEvent::set_tracker(const char* value) {
  set_has_tracker();
  if (tracker_ == &::google::protobuf::internal::kEmptyString) {
    tracker_ = new ::std::string;
  }
  tracker_->assign(value);
}
inline void TrackEvent::set_tracker(const char* value, size_t size) {
  set_has_tracker();
  if (tracker_ == &::google::protobuf::internal::kEmptyString) {
    tracker_ = new ::std::string;
  }
  tracker_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TrackEvent::mutable_tracker() {
  set_has_tracker();
  if (tracker_ == &::google::protobuf::internal::kEmptyString) {
    tracker_ = new ::std::string;
  }
  return tracker_;
}
inline ::std::string* TrackEvent::release_tracker() {
  clear_has_tracker();
  if (tracker_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tracker_;
    tracker_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string tracker_x = 4;
inline bool TrackEvent::has_tracker_x() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TrackEvent::set_has_tracker_x() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TrackEvent::clear_has_tracker_x() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TrackEvent::clear_tracker_x() {
  if (tracker_x_ != &::google::protobuf::internal::kEmptyString) {
    tracker_x_->clear();
  }
  clear_has_tracker_x();
}
inline const ::std::string& TrackEvent::tracker_x() const {
  return *tracker_x_;
}
inline void TrackEvent::set_tracker_x(const ::std::string& value) {
  set_has_tracker_x();
  if (tracker_x_ == &::google::protobuf::internal::kEmptyString) {
    tracker_x_ = new ::std::string;
  }
  tracker_x_->assign(value);
}
inline void TrackEvent::set_tracker_x(const char* value) {
  set_has_tracker_x();
  if (tracker_x_ == &::google::protobuf::internal::kEmptyString) {
    tracker_x_ = new ::std::string;
  }
  tracker_x_->assign(value);
}
inline void TrackEvent::set_tracker_x(const char* value, size_t size) {
  set_has_tracker_x();
  if (tracker_x_ == &::google::protobuf::internal::kEmptyString) {
    tracker_x_ = new ::std::string;
  }
  tracker_x_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TrackEvent::mutable_tracker_x() {
  set_has_tracker_x();
  if (tracker_x_ == &::google::protobuf::internal::kEmptyString) {
    tracker_x_ = new ::std::string;
  }
  return tracker_x_;
}
inline ::std::string* TrackEvent::release_tracker_x() {
  clear_has_tracker_x();
  if (tracker_x_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tracker_x_;
    tracker_x_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string tracker_y = 5;
inline bool TrackEvent::has_tracker_y() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TrackEvent::set_has_tracker_y() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TrackEvent::clear_has_tracker_y() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TrackEvent::clear_tracker_y() {
  if (tracker_y_ != &::google::protobuf::internal::kEmptyString) {
    tracker_y_->clear();
  }
  clear_has_tracker_y();
}
inline const ::std::string& TrackEvent::tracker_y() const {
  return *tracker_y_;
}
inline void TrackEvent::set_tracker_y(const ::std::string& value) {
  set_has_tracker_y();
  if (tracker_y_ == &::google::protobuf::internal::kEmptyString) {
    tracker_y_ = new ::std::string;
  }
  tracker_y_->assign(value);
}
inline void TrackEvent::set_tracker_y(const char* value) {
  set_has_tracker_y();
  if (tracker_y_ == &::google::protobuf::internal::kEmptyString) {
    tracker_y_ = new ::std::string;
  }
  tracker_y_->assign(value);
}
inline void TrackEvent::set_tracker_y(const char* value, size_t size) {
  set_has_tracker_y();
  if (tracker_y_ == &::google::protobuf::internal::kEmptyString) {
    tracker_y_ = new ::std::string;
  }
  tracker_y_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TrackEvent::mutable_tracker_y() {
  set_has_tracker_y();
  if (tracker_y_ == &::google::protobuf::internal::kEmptyString) {
    tracker_y_ = new ::std::string;
  }
  return tracker_y_;
}
inline ::std::string* TrackEvent::release_tracker_y() {
  clear_has_tracker_y();
  if (tracker_y_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tracker_y_;
    tracker_y_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string trackee = 6;
inline bool TrackEvent::has_trackee() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TrackEvent::set_has_trackee() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TrackEvent::clear_has_trackee() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TrackEvent::clear_trackee() {
  if (trackee_ != &::google::protobuf::internal::kEmptyString) {
    trackee_->clear();
  }
  clear_has_trackee();
}
inline const ::std::string& TrackEvent::trackee() const {
  return *trackee_;
}
inline void TrackEvent::set_trackee(const ::std::string& value) {
  set_has_trackee();
  if (trackee_ == &::google::protobuf::internal::kEmptyString) {
    trackee_ = new ::std::string;
  }
  trackee_->assign(value);
}
inline void TrackEvent::set_trackee(const char* value) {
  set_has_trackee();
  if (trackee_ == &::google::protobuf::internal::kEmptyString) {
    trackee_ = new ::std::string;
  }
  trackee_->assign(value);
}
inline void TrackEvent::set_trackee(const char* value, size_t size) {
  set_has_trackee();
  if (trackee_ == &::google::protobuf::internal::kEmptyString) {
    trackee_ = new ::std::string;
  }
  trackee_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TrackEvent::mutable_trackee() {
  set_has_trackee();
  if (trackee_ == &::google::protobuf::internal::kEmptyString) {
    trackee_ = new ::std::string;
  }
  return trackee_;
}
inline ::std::string* TrackEvent::release_trackee() {
  clear_has_trackee();
  if (trackee_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = trackee_;
    trackee_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string trackee_x = 7;
inline bool TrackEvent::has_trackee_x() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TrackEvent::set_has_trackee_x() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TrackEvent::clear_has_trackee_x() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TrackEvent::clear_trackee_x() {
  if (trackee_x_ != &::google::protobuf::internal::kEmptyString) {
    trackee_x_->clear();
  }
  clear_has_trackee_x();
}
inline const ::std::string& TrackEvent::trackee_x() const {
  return *trackee_x_;
}
inline void TrackEvent::set_trackee_x(const ::std::string& value) {
  set_has_trackee_x();
  if (trackee_x_ == &::google::protobuf::internal::kEmptyString) {
    trackee_x_ = new ::std::string;
  }
  trackee_x_->assign(value);
}
inline void TrackEvent::set_trackee_x(const char* value) {
  set_has_trackee_x();
  if (trackee_x_ == &::google::protobuf::internal::kEmptyString) {
    trackee_x_ = new ::std::string;
  }
  trackee_x_->assign(value);
}
inline void TrackEvent::set_trackee_x(const char* value, size_t size) {
  set_has_trackee_x();
  if (trackee_x_ == &::google::protobuf::internal::kEmptyString) {
    trackee_x_ = new ::std::string;
  }
  trackee_x_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TrackEvent::mutable_trackee_x() {
  set_has_trackee_x();
  if (trackee_x_ == &::google::protobuf::internal::kEmptyString) {
    trackee_x_ = new ::std::string;
  }
  return trackee_x_;
}
inline ::std::string* TrackEvent::release_trackee_x() {
  clear_has_trackee_x();
  if (trackee_x_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = trackee_x_;
    trackee_x_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string trackee_y = 8;
inline bool TrackEvent::has_trackee_y() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TrackEvent::set_has_trackee_y() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TrackEvent::clear_has_trackee_y() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TrackEvent::clear_trackee_y() {
  if (trackee_y_ != &::google::protobuf::internal::kEmptyString) {
    trackee_y_->clear();
  }
  clear_has_trackee_y();
}
inline const ::std::string& TrackEvent::trackee_y() const {
  return *trackee_y_;
}
inline void TrackEvent::set_trackee_y(const ::std::string& value) {
  set_has_trackee_y();
  if (trackee_y_ == &::google::protobuf::internal::kEmptyString) {
    trackee_y_ = new ::std::string;
  }
  trackee_y_->assign(value);
}
inline void TrackEvent::set_trackee_y(const char* value) {
  set_has_trackee_y();
  if (trackee_y_ == &::google::protobuf::internal::kEmptyString) {
    trackee_y_ = new ::std::string;
  }
  trackee_y_->assign(value);
}
inline void TrackEvent::set_trackee_y(const char* value, size_t size) {
  set_has_trackee_y();
  if (trackee_y_ == &::google::protobuf::internal::kEmptyString) {
    trackee_y_ = new ::std::string;
  }
  trackee_y_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TrackEvent::mutable_trackee_y() {
  set_has_trackee_y();
  if (trackee_y_ == &::google::protobuf::internal::kEmptyString) {
    trackee_y_ = new ::std::string;
  }
  return trackee_y_;
}
inline ::std::string* TrackEvent::release_trackee_y() {
  clear_has_trackee_y();
  if (trackee_y_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = trackee_y_;
    trackee_y_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace shared
}  // namespace whereareyou
}  // namespace luyun
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::luyun::whereareyou::shared::TrackEvent_EventType>() {
  return ::com::luyun::whereareyou::shared::TrackEvent_EventType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_proto_2ftrackevent_2eproto__INCLUDED
